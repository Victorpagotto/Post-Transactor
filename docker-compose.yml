version: "3"
services:
  frontend_server:
    ports:
      - ${APP_FRONT_PORT_ENV}:3000
    build: ./post-transactor_frontend/
    restart: 'on-failure'
    working_dir: ./post-transactor_frontend
    depends_on:
      post-transactor_backend:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "lsof", "-i:3000"]
      interval: 20s
      timeout: 150s
      retries: 5
      start_period: 30s
    environment:
      - APP_FRONT_PORT=${APP_FRONT_PORT_ENV}
      - APP_BACK_PORT=${APP_BACK_PORT_ENV}
  backend_server:
    ports:
      - ${APP_BACK_PORT_ENV}:3001
    build: ./post-transctor_backend/
    restart: 'on-failure'
    working_dir: ./post-transactor_backend
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "lsof", "-i:3001"]
      interval: 20s
      timeout: 150s
      retries: 5
      start_period: 30s
    environment:
      - DB_USER=${DB_USER_ENV}
      - DB_HOST=${DB_HOST_ENV}
      - DB_NAME=${DB_NAME_ENV}
      - DB_PASSWORD=${DB_PASSWORD_ENV}
      - DB_PORT=${DB_PORT_ENV}
      - APP_BACK_PORT=${APP_BACK_PORT_ENV}
  db_server:
    image: postgres:15
    container_name: db
    environment:
      - POSTGRES_USER=${DB_USER_ENV}
      - POSTGRES_PASSWORD=${DB_PASSWORD_ENV}
      - POSTGRES_DB=${DB_NAME_ENV}
    ports:
      - - ${DB_PORT_ENV}:5432
    restart: 'always'
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    cap_add:
      - SYS_NICE
    volumes:
      - ./db:/var/lib/postgresql/data